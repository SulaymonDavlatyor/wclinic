<?php

namespace api\modules\v1\resources;

use Yii;
use yii\helpers\Url;
use yii\web\Link;
use yii\web\Linkable;
use yii\helpers\ArrayHelper;

class Doctor extends \common\models\RnovaDoctor implements Linkable
{
	public $profs;

    public function fields()
    {
        return ['id', 'external_id', 'slug', 'name', 'avatar', 'profs', 'short_desc', 'full_desc', 'link_review', 'link_napopravku', 'link_prodoctorov'];
    }

    public function extraFields()
    {
        return ['reviews'];
    }

	public function afterFind()
	{
		parent::afterFind(); // TODO: Change the autogenerated stub

		$this->profs = implode(', ', ArrayHelper::getColumn($this->professions, 'title'));

		if (Yii::$app->controller->action->id === 'view') {
			if (!empty($this->photo_path)) {

				$this->avatar = Yii::$app->glide->createSignedUrl([
					'glide/index',
					'path' => $this->photo_path,
					'w' => 600
				], true);
			} else {
				$this->avatar = Yii::$app->glide->createSignedUrl([
					'glide/index',
					'path' => '/images/no-avatar.jpg',
					'w' => 600
				], true);
//			$this->avatar = Url::to('/cache/images/no-avatar.jpg', true);
			}
		}
		else {
			if (!empty($this->avatar)) {
				$basename = basename($this->avatar);
				$source_path = Yii::getAlias('@storage/web/source');
				$sub_dir = '/images/rnova_avatars/';

				if (!file_exists($source_path . $sub_dir . $basename)) {
					file_put_contents($source_path . $sub_dir . $basename, file_get_contents($this->avatar));
				}

				$this->avatar = Yii::$app->glide->createSignedUrl([
					'glide/index',
					'path' => "$sub_dir$basename",
					'w' => 600
				], true);
//			Url::to('@storageUrl') . "/cache$sub_dir$basename";
			} else {
				$this->avatar = Yii::$app->glide->createSignedUrl([
					'glide/index',
					'path' => '/images/no-avatar.jpg',
					'w' => 600
				], true);
//			$this->avatar = Url::to('/cache/images/no-avatar.jpg', true);
			}
		}
	}

	/**
     * Returns a list of links.
     *
     * @return array the links
     */
    public function getLinks()
    {
        return [
            Link::REL_SELF => Url::to(['doctor/view', 'slug' => $this->slug], true)
        ];
    }

	protected function getReviews()
	{
		return $this->hasMany(Review::class, ['doctor_id' => 'id']);
	}
}
